using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

[System.Serializable]
public class BattleEntity
{
    public int HP;
    public int ATK;
    public int Def;
    public string AttackType;

    public BattleEntity() { }

    public BattleEntity(int hP, int aTK)
    {
        HP = hP;
        ATK = aTK;
    }

    public BattleEntity(int hP, int aTK, int def)
    {
        HP = hP;
        ATK = aTK;
        Def = def;
    }
}

[System.Serializable]
public class BattleUI
{
    public Image HpBar;
    public TextMeshProUGUI BattleEntityText;
    public void SetBattleUI(BattleEntity battleEntity)
    {
        BattleEntityText.SetText($"ATK : {battleEntity.ATK}, DEF : {battleEntity.Def}");
    }

    public void SetHPBar(int current, int max)
    {
        HpBar.fillAmount = (float)current / max;
    }

}

// 추상 클래스.
// 이 클래스를 인스턴스 할 수 없다.
// 이 클래스를 오브젝트의 컴포넌트로 사용하지 마세요.
// Player, Monster를 사용해서 이 클래스를 구현하라.
// 메소드에 abstract 키워드를 추가할 수 있다.

/*
 *  abstract vs virtual
 *  
 *  abstract 추상 함수 : 본문을 가질 수 없다. - 자식 클래스에서 구현을 강제한다.
 *  virtual 가상 함수 : 본문을 가질 수 있습니다. 자식 클래스에서 이 코드를 사용을 안할 수도 있고, base키워드를 사용해서 사용할 수 있다.
 *  
 */

public abstract class Battle : MonoBehaviour
{
    public BattleEntity battleEntity;
    public BattleUI battleUI;
    public BattleManager battleManager;
    
    public int CurrentHP {
        get {
            if(currentHP <=0)
            {
                // 사망 시의 효과음, 이펙트, 애니메이션... 이벤트 실행
                currentHP = 0;
                Death();
            }
            else
            {
                // 피격 시의 효과음, 이펙트, 애니메이션 .... 이벤트 실행
            }

            return currentHP; 
        }
        private set
        {
            if (value > battleEntity.HP) value = battleEntity.HP;
                
            currentHP = value; 
        } 
    } // Battle 클래스에서 현재 체력 변수를 수정할 수 있다.


    [SerializeField] private int currentHP;


    // Start is called before the first frame update
    void Start()
    {
        // battleEntity = new BattleEntity(playerHP, playerATK, playerDEF);

        Debug.Log($"HP : {battleEntity.HP}, ATK : {battleEntity.ATK}, DEF : {battleEntity.Def}");
        battleUI.SetBattleUI(battleEntity);
        CurrentHP = battleEntity.HP;
    }

    // Update is called once per frame
    void Update()
    {
        battleUI.SetHPBar(CurrentHP, battleEntity.HP);
    }

    // 상대에게 데미지를 받는다 (TakeDamage) :: CurrentHP - (ATK 방어력에따라서 감소)

    // 데미지를 입었다.
    public virtual void TakeDamage(Battle other)
    {
        int FinalDamage = (other.battleEntity.ATK - battleEntity.Def);
        if (FinalDamage <= 0) FinalDamage = 1;

        CurrentHP -= FinalDamage; // 상대의 공격력 

        Debug.Log($"최종데미지 : {FinalDamage}, 공격자의 공격력 : {other.battleEntity.ATK}, 방어력 : {battleEntity.Def}");
        
    }

    // 죽었을 때 로직 처리하기 Die,Death :: CurrentHP 0보다 작아졌을 때 이벤트를 실행한다.

    public void Death()
    {
        // 사망 이벤트 호출
        Debug.Log($"사망했습니다. 현재 체력 : {currentHP}");
    }

    public virtual void Attack()
    {

    }

    public abstract void Attack(Battle other);


    public virtual void Recover(int amount)
    {
        CurrentHP += amount;
    }

    public virtual void ShieldUp(int amount)
    {
        battleEntity.Def += amount;
        battleUI.SetBattleUI(battleEntity);
    }

    public virtual void DamageUp(int amount)
    {

    }

}
